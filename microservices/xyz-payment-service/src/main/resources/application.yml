spring:
 application.name: xyz-payment-service
 # Set the following property to "none" or "validate" in a prod environment
 jpa:
  hibernate:
   ddl-auto: validate
  
  properties: 
   hibernate:
    dialect: org.hibernate.dialect.MySQLDialect
    boot.allow_jdbc_metadata_access: false
    
 flyway:
  enabled: false
  
   
 datasource:
  url: jdbc:mysql://localhost:3307/xyz_unversity
  username: david
  password: david123
  # Wait for 60 seconds during startup to establish db connection
  hikari.initializationFailTimeout: 60000
 
server:
 port: 7003
 error.include-message: always
 

logging:
 level:
  root: INFO
  com.david.microservices.alpha: DEBUG
  org.hibernate.SQL: DEBUG
  org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  

api:
 common:
  title: XYZ University Payment Services API
  description: This API handles Payment Notifications basically by processing the event from queue and saving to database
  version: 1.0.0
  
  termsOfService: https://david-matu.github.io/alpha-microservices/terms-of-service
  license: General Usage License
  licenseUrl: https://david-matu.github.io/alpha-microservices/license
  
  externalDocDesc: Find out the public info about this API
  externalDocUrl: https://david-matu.github.io/alpha-microservices
  
  contact:
   name: David Matu
   url: https://david-matu.github.io
   email: davidmatu817@gmail.com
   
 responseCodes:
  ok.description: OK
  badRequest.description: Bad Request, invalid format of the request. See response message for more information 
  notFound.description: Not found. The specified id does not exist 
  unprocessableEntity.description: Uprocessable entity, input parameters caused the processing to fail. See response message for more information
 
 payments:
  get-payment:
   summary: Get inidividual payment based on Payent ID
   description: Ok

  add-payment:
   summary: Add new Payment notification record
   description: Creates a entity in the database
  
  get-payments-all:
   summary: Fetch all Payment Notifications
   description: Returns a list of all payments that were saved successfully in the database
        
springdoc:
 swagger-ui.path: /openapi/swagger-ui.html
 api-docs.path: /openapi/v3/api-docs
 packagesToScan: edu.xyz.services.pmt
 pathsToMatch: /**

spring.cloud.stream:
 defaultBinder: rabbit
 default.contentType: application/json
 bindings.messageProcessor-in-0:
  destination: paymentq
  group: paymentsAuditGroup
 
 bindings.messageProcessor-in-0.consumer:
  maxAttempts: 3
  backOffInitialInterval: 500
  backOffMaxInterval: 1000
  backOffMultiplier: 2.0
  autoBindDlq: true
  republishToDlq: true
  
spring.rabbitmq:
  host: 127.0.0.1
  port: 5672
  username: guest
  password: guest
  
---
server.port: 8080

spring:
 config.activate.on-profile: docker
 
 datasource:
  url: jdbc:mysql://mysql:3306/xyz_unversity
  username: david
  password: david123
  hikari:
   schema: xyz_unversity
 
 # flyway will use above datasource to connect / COmmenting to allow this be managed by the enrolment service
# flyway:
#  enabled: true
#  locations: classpath:db/migrations
#  validate-on-migrate: true
#  default-schema: xyz_unversity
  
spring.rabbitmq.host: rabbitmq

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.messageProcessor-in-0.consumer:
  partitioned: true
  instanceCount: 2

---
spring.config.activate.on-profile: streaming_instance_0

spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 0

---
spring.config.activate.on-profile: streaming_instance_1

spring.cloud.stream.bindings.messageProcessor-in-0.consumer.instanceIndex: 1

---
spring.config.activate.on-profile: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.kafka.bootstrap-servers: kafka:9092
spring.cloud.stream.kafka.binder.replication-factor: 1
